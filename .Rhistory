find.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
install.packages("KernSmooth")
library(KernSmooth)
getwd
getwd()
install.packages("curl")
install.packages("networkD3")
library(networkD3)
MyData <- read.csv("C:\Users\Maxime\Desktop\Coursera\0- Data Visualization\Assignment Data\2nd assignment - week 3\karate.csv")
help(read.csv)
MyData <- read.csv(file="C:/Users/Maxime/Desktop/Coursera/0- Data Visualization/Assignment Data/2nd assignment - week 3/karate.csv")
MyData
MyData{0,1}
MyData[0,1]
FramedData <- data.frame(MyData)
FramedData
class MyData
class(MyData)
class(FramedData)
simpleNetwork(MyData)
simpleNetwork(MyData, fontFamily = "sans-serif")
simpleNetwork(MyData, fontFamily = "sans-serif", fontsize = 12)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 12)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, fontColor = 'red')
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, fontColor = #00ff)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, fontColor = #00ff)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, fontColor = red)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, linkDistance = 100)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, linkDistance = 200)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, linkDistance = 200, charge = 0)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, linkDistance = 200)
install.packages("igraph")
library(igraph)
plot(MyData)
MyData2 <- graph.dat.frame(MyData, directed = F)
MyData2 <- graph.data.frame(MyData, directed = F)
V(MyData2)
E(MyData2)
degree(MyData2)
plot(MyData2)
MyData2 <- simplify(MyData2, remove.multiple = T, remove.loops = T)
plot(MyData2)
?par
plot(MyData2)
plot(MyData2, vertex.color = 19)
plot(MyData2, vertex.color = 20)
simpleNetwork(MyData, fontFamily = "sans-serif", fontSize = 15, linkDistance = 200)
plot(MyData2, vertex.color = 20)
install.packages("qgraph")
qgraph(MyData2)
library(qgraph)
library("qgraph")
install.packages(DiagrammeR)
install.packages("DiagrammeR")
library(DiagrammeR)
grViz("C:/Users/Maxime/Desktop/Coursera/0- Data Visualization/Assignment Data/2nd assignment - week 3/karatedata.txt")
grViz("C:/Users/Maxime/Desktop/Coursera/0- Data Visualization/Assignment Data/2nd assignment - week 3/karatedata.txt")
grViz("C:/Users/Maxime/Desktop/Coursera/0- Data Visualization/Assignment Data/2nd assignment - week 3/karatedata.txt")
qgraph(MyData2)
plot(MyData2, vertex.color = 20)
grViz("C:/Users/Maxime/Desktop/Coursera/0- Data Visualization/Assignment Data/2nd assignment - week 3/karatedata.txt")
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20, main = "Title")
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
title(main = "Title")
title(main = "Karate Club Social Network")
title(main = "Karate Club Social Network")
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
plot(MyData2, vertex.color = 20)
title(main = "Karate Club Social Network")
x <- 4
class(x)
x ,_ c(4, true)
x <_ c(4, true)
x <- c(4, true)
x <- c(4, TRUE)
class(x)
x <- c(1,3,5)
y <- c(3,2,10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[1]
x <- 1:4
y <- 2
x + y
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
data <- read.csv("C:\Users\Maxime\Desktop\Coursera\2- R Programming\hw1_data.csv")
data <- read.csv("C:/Users/Maxime/Desktop/Coursera/2- R Programming/hw1_data.csv")
data
data[1:5]
print(data[2,])
print(data[1:2,])
print(data[47,])
nanumber <- is.na(data[,1])
nanumber
?sum
?is.na
for (i = 1:153) { if data[i] == TRUE count <- count + 1}
for (i <- 1:153) { if data[i] == TRUE count <- count + 1}
for (i 1:153) { if data[i] == TRUE count <- count + 1}
?for
data
ozone <- data[1,]
ozone
ozone <- data[,1]
ozone
length(ozone)
bad <- is.na(ozone)
length(bad)
ozoneNoNa <- ozone[!bad]
length(ozoneNoNa)
153-116
mean(ozoneNoNa)
subq18 <- data[ozone > 31,temp > 90]
data
data$Temp
?complete.cases
data
data[data$ozone > 31,]
data$Ozone
data[data$ozone>31,]
data[,data$ozone>31]
class(data$ozone)
bad <- null
bad <- 0
bad
bad <- is.na(data$ozone)
bad <- is.na(data[,1])
bad
CDozone <- data[!bad]
CDozone <- data[,!bad]
data[!bad]
CDdata <- complete.cases(data)
CDdata
CleanData <- data[CDdata]
CleanData <- data[,CDdata]
CleanData <- data[CDdata,]
CleanData
class(CleanData$Ozone)
class(CleanData$Temp)
Q18 <- subset(CleanData, Ozone > 31 & Temp > 90)
Q18
mean(Q18$Solar.R)
Q19 <- subset(data,Temp == 6)
Q19
Q19 <- subset(data,Month == 6)
Q19
mean(Q19$Temp)
Q20 <- subset(data,month == 5)
Q20 <- subset(data,Month == 5)
Q20
?max
max(Q20$Ozone)
max(Q20$Ozone,na.rm=TRUE)
cube <- function(x, n) {
x^3
}
cube(3)
n
X <- 1:10
x
if (X > 10) print("t")
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z <- 10
f(3)
y
x
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
library(datasets)
?data
datasets
iris
head(iris)
data("iris")
data(iris)
iris
iris[Species="virginica",]
iris[iris$Species="virginica",]
iris(iris$Species="virginica",)
iris[5,1]
iris[1,1]
iris[1,5]
names(iris)
iris.species
iris$species
iris["virginica",]
iris[virginica,]
iris[species=virginica,]
iris[species="virginica",]
iris[Species=virginica,]
class(iris)
iris$Species
tgt<-(iris$Species=virginica)
tgt<-(iris$Species="virginica")
tgt
tgt<-(iris$Species=="virginica")
tgt
rm(iris)
data(iris)
tgt<-(iris$Species=="virginica")
tgt
iris[tgt,]
mean(iris[tgt,"Sepal.Length"])
colmeans(iris)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
data(mtcars)
mtcars
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tp<-tapply(mtcars$hp, mtcars$cyl, mean)
tp
?abs
abs(mtcars$4-mtcars$8)
names(tp)
abs(tp$4-tp$8)
tp$4
tp[,1]
tp[1]
abs(tp[3]-tp[1])
abs(tp[1]-tp[3])
tp
debug(ls)
ls()
0
1
2
3
debug(ls)
debug(ls)
?"matrix"
?solve
?print
getwd
getwd()
setwd("C:/Users/Maxime/Desktop/Coursera/2- R Programming/Assignment 2/localrepo/ProgrammingAssignment2/ProgrammingAssignment2")
getwd()
oldwd<-getwd()
ls()
ks
list
library("cacheMatrix.R")
myMatrix <- x$get()
souce("cacheMatrix.R")
source("cacheMatrix.R")
?"matrix"
args(makeCacheMatrix)
makeCacheMatrix$set
makeCacheMatrix$set(1:6,2,3)
makeCacheMatrix
makeCacheMatrix(1:6,2,3)
makeCacheMatrix(1:6)
makeCacheMatrix$set(1:6)
source('C:/Users/Maxime/Desktop/Coursera/2- R Programming/Assignment 2/ConstructorExample.R')
makeVector(1:5)
makeVector
makeVector$set(1:5)
makeVector.set(1:5)
makeVector()\
makeVector()
makeVector(m)
makeVector(x)
makeVector(1:6)
a <- makeVector(1:4)
a
a
rm(a)\
rm(a)
source("cacheMatrix.R")
View(cachemean)
View(cachemean)
View(cachemean)
rm(cachemean())
rm(cachemean
rm(cachemean)
rm(cacheSolve)
rm(makeCacheMatrix)
rm(makeVector)
source("cacheMatrix.R")
a <- makeVector(c(1,2,3,4))
a
a <- makeVector(c(1,2,3,4,5,6))
a <- makeVector(c(1,2,3,4,5,6))
a$get()
a$getmean()
cachemean(a)
cachemean(a)
source("cacheMatrix.R")
a$set(c(10,20,30,40))
a$get()
cachemean(a)
cachemean(a)
b <- makeCacheMatrix(1:6,2,3)
b <- makeCacheMatrix(c(1:6,2,3)
b$get
b <- makeCacheMatrix()
b$get
b$get()
b$set(1:6,2,3)
b$set(1:6)
b$get
b$get()
class(b)
?matrix
b <- makeCacheMatrix(1:6)
b$get
b$get()
b <- makeCacheMatrix(1:6, nrow=2, ncol=3)
b <- makeCacheMatrix(1:6, nrow = 2, ncol = 3)
b <- makeCacheMatrix(1:6)
b$get
b$get()
b$set(1:8)
b$get
b$get()
b$set(1:8, nrow = 2, ncol = 3)
c<-matrix(1:6,2,3)
c
rm(c)
b$get()
b$getInverse()
cacheSolve(x)
cacheSolve(b)
source("cachematrix.R")
b$get()
b$getInverse()
b$getinverse()
rm(a)
rm(b)
source("cachematrix.R")
b$getinverse()
b$set(1:8)
b <- makeCacheMatrix(1:8)
source("cachematrix.R")
b <- makeCacheMatrix(1:8)
b$get()
cacheSolve(b)
solve(b)
?solve
class(a)
class(b)
test <- matrix(1:8)
class(test)
b$invMatrix
rm(b)
source("cachematrix.R")
b <- makeCacheMatrix(1:8)
b$get()
b <- makeCacheMatrix(1:8,2,4)
b <- makeCacheMatrix(1:8,nrow = 2,ncol = 4)
b<-matrix(1:8)
class(b)
rm(b)
b <- makeCacheMatrix(1:8)
b$getinverse()
?"matrix"
is.matrix(b)
source("cachematrix.R")
rm(cacheSolve())
rm(cacheSolve
rm(cacheSolve)
rm(b)
b<-makeCacheMatrix2(1:8)
b$get()
class(b)
?as.numeric
b<-makeCacheMatrix2(as.numeric(1:8))
b$get()
class(b)
?matrix()
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
b = makeCacheMatrix(matrix(1:8, nrow=2, ncol=4))
b <- makeCacheMatrix(matrix(1:8, nrow=2, ncol=4))
b$get()
cacheSOlve(b)
cacheSolve(b)
cachesolve(b)
class(b)
b&get
class(amatrix)
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
class(amatrix)
amatrix = makeCacheMatrix(matrix(1:8, nrow=2, ncol=2))
class(amatrix)
test<-matrix(1:8)
class(test)
amatrix = makeCacheMatrix2(matrix(1:8, nrow=2, ncol=2))
class(amatrix)
class(as.matrix(b))
cachesolve(b)
source("cachematrix.R")
cachesolve(b)
b <- makeCacheMatrix(matrix(1:4, nrow=2, ncol=2))
cachesolve(b)
b$get()
source("cachematrix.R")
rm(cachemean)
rm(cachesolve)
rm(cachesolve2)
rm(makeVector)
rm(makeCacheMatrix)
rm(makeCacheMatrix2)
rm(b)
rm(amatrix)
rm(test)
source("cachematrix.R")
b <- makeCacheMatrix(matrix(1:9), nrow = 3, ncol = 3)
b <- makeCacheMatrix(matrix(1:9, nrow = 3, ncol = 3))
b$get()
b$getinverse()
b$set(matrix(1:25,nrow=5,ncol=5))
b$get()
cachesolve(b)
b$set(matrix(1:36,nrow=6,ncol=6))
cachesolve(b)
b$set(matrix(c(10,20,30,40),nrow=2,ncol=2))
b$get()
cachesolve(b)
myMatrix <- makeCacheMatrix(matrix(c(10,15,20,25),nrow=2,ncol=2))
myMatrix$get()
myMatrix$setinverse(myMatrix)
myMatrix$getinverse()
myMatrix$getinverse
myMatrix$invMatrix
myMatrix$get()
myMatrix$setinverse(solve(myMatrix))
myMatrix$get()
myMatrix$invMatrix
cachesolve(myMatrix)
cachesolve(myMatrix)
myMatrix$get()
b$get()
cachesolve(b)
args(b$setinverse())
args(b$setinverse(solve))
b$getinverse
b$getinverse()
b$invMatrix
cachesolve(b)
b$invMatrix = NULL
cachesolve(b)
rm(b_)
rm(b)
rm(myMatrix)
myMatrix <- makeCacheMatrix(matrix(c(10,15,20,25),nrow=2,ncol=2))
myMatrix$get()
myMatrix$set(matrix(1:4,nrow=2,ncol=2))
myMatrix$get()
myMatrix$getinverse()
cachesolve(myMatrix)
myMatrix$getinverse()
?matrix
rm(myMatrix)
rm(cachesolve)
rm(makeCacheMatrix)
getwd
getwd()
ls
ls()
dir()
source("cachematrix.R")
b <- makeCacheMatrix(matrix(1:16,nrow=4,ncol=4))
b$get()
b$set(matrix(c(10,12,18,32,24,34,67,78,89,65,75,46,23,56,78,45),nrow=4,ncol-4))
b$set(matrix(c(10,12,18,32,24,34,67,78,89,65,75,46,23,56,78,45),nrow=4,ncol=4))
b$get()
b$invMatrix
b$getinverse()
cachesolve(b)
b$invMatrix
cachesolve(b)
